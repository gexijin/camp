// Initialize canvas and context
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// Game constants
const SCREEN_WIDTH = canvas.width;
const SCREEN_HEIGHT = canvas.height;
const WHITE = '#ffffff';
const RED = '#ff0000';

// Player settings
const playerWidth = 50;
const playerHeight = 50;
let playerX = SCREEN_WIDTH / 2 - playerWidth / 2;
let playerY = SCREEN_HEIGHT - playerHeight - 20;
const playerSpeed = 5;

// Bullet settings
const bulletWidth = 5;
const bulletHeight = 15;
const bulletSpeed = 7;
let bullets = [];

// Enemy settings
const enemyWidth = 50;
const enemyHeight = 50;
const enemySpeed = 3;
let enemies = [];

// Game variables
let score = 0;
let gameRunning = true;

// Handle player movement
function movePlayer(direction) {
    if (direction === 'left' && playerX > 0) {
        playerX -= playerSpeed;
    } else if (direction === 'right' && playerX < SCREEN_WIDTH - playerWidth) {
        playerX += playerSpeed;
    } else if (direction === 'up' && playerY > 0) {
        playerY -= playerSpeed;
    } else if (direction === 'down' && playerY < SCREEN_HEIGHT - playerHeight) {
        playerY += playerSpeed;
    }
}

// Handle shooting
function shoot() {
    bullets.push({
        x: playerX + playerWidth / 2 - bulletWidth / 2,
        y: playerY
    });
}

// Spawn enemy
function spawnEnemy() {
    const side = Math.random() < 0.5 ? 'left' : 'right';
    let enemyX, enemyVelocity;
    if (side === 'left') {
        enemyX = -enemyWidth;
        enemyVelocity = enemySpeed;
    } else {
        enemyX = SCREEN_WIDTH;
        enemyVelocity = -enemySpeed;
    }
    const enemyY = Math.floor(Math.random() * (SCREEN_HEIGHT - enemyHeight - 50)) + 50;
    enemies.push({
        x: enemyX,
        y: enemyY,
        velocity: enemyVelocity
    });
}

// Collision detection
function checkCollisions() {
    // Player-enemy collision
    for (let enemy of enemies) {
        if (playerX < enemy.x + enemyWidth &&
            playerX + playerWidth > enemy.x &&
            playerY < enemy.y + enemyHeight &&
            playerY + playerHeight > enemy.y) {
            return true;
        }
    }
    // Bullet-enemy collision
    for (let bullet of bullets) {
        for (let enemy of enemies) {
            if (bullet.x < enemy.x + enemyWidth &&
                bullet.x + bulletWidth > enemy.x &&
                bullet.y < enemy.y + enemyHeight &&
                bullet.y + bulletHeight > enemy.y) {
                bullets.splice(bullets.indexOf(bullet), 1);
                enemies.splice(enemies.indexOf(enemy), 1);
                score++;
                break;
            }
        }
    }
    return false;
}

// Game loop
function gameLoop() {
    if (!gameRunning) return;

    // Clear canvas
    ctx.clearRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

    // Move player
    window.addEventListener('keydown', function(event) {
        switch (event.key) {
            case 'a':
                movePlayer('left');
                break;
            case 'd':
                movePlayer('right');
                break;
            case 'w':
                movePlayer('up');
                break;
            case 's':
                movePlayer('down');
                break;
            case ' ':
                shoot();
                break;
        }
    });

    // Spawn enemies randomly
    if (Math.random() < 0.01) {
        spawnEnemy();
    }

    // Move bullets
    for (let bullet of bullets) {
        bullet.y -= bulletSpeed;
    }

    // Move enemies
    for (let enemy of enemies) {
        enemy.x += enemy.velocity;
    }

    // Draw player
    ctx.fillStyle = WHITE;
    ctx.fillRect(playerX, playerY, playerWidth, playerHeight);

    // Draw bullets
    ctx.fillStyle = WHITE;
    for (let bullet of bullets) {
        ctx.fillRect(bullet.x, bullet.y, bulletWidth, bulletHeight);
    }

    // Draw enemies
    ctx.fillStyle = RED;
    for (let enemy of enemies) {
        ctx.fillRect(enemy.x, enemy.y, enemyWidth, enemyHeight);
    }

    // Check collisions
    if (checkCollisions()) {
        gameRunning = false;
        gameOver();
        return;
    }

    // Update score
    ctx.fillStyle = WHITE;
    ctx.font = '24px Arial';
    ctx.fillText(`Score: ${score}`, 10, 30);

    // Request next frame
    requestAnimationFrame(gameLoop);
}

// Game over screen
function gameOver() {
    ctx.clearRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);
    ctx.fillStyle = WHITE;
    ctx.font = '36px Arial';
    ctx.fillText(`Game Over! Score: ${score}`, SCREEN_WIDTH / 2 - 200, SCREEN_HEIGHT / 2);
}

// Start game loop
gameLoop();
